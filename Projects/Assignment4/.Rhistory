x  = cbind(new_data,data_dummy)
head(x)
x$fullCarrier = NULL
head(x)
data.pca <- PCA(pca_data ,scale.unit=TRUE)
str(x)
data.pca <- PCA(x ,scale.unit=TRUE)
data_dummy <- data_dummy[data_dummy$col_values != 0, ]
columns = c('speed', 'satellites', 'precision1', 'signal_inst','fullCarriermovistar','fullCarriervodafone')
columns = c('speed', 'satellites', 'precision1', 'signal_inst','fullCarriermovistar','fullCarriervodafone')
x = subset(x,select=columns)
data.pca <- PCA(x ,scale.unit=TRUE)
data.pca
data.pca$var
new_data = subset(pca_data, (fullCarrier == 'movistar'|
fullCarrier == 'vodafone' |
fullCarrier == 'orange') )
dim(new_data)
data_dummy = (model.matrix(~fullCarrier - 1, new_data))
dim(data_dummy)
x  = cbind(new_data,data_dummy)
str(x)
columns = c('speed', 'satellites', 'precision1', 'signal_inst','fullCarriermovistar',
'fullCarrierorange','fullCarriervodafone')
x = subset(x,select=columns)
data.pca <- PCA(x ,scale.unit=TRUE)
table(pca_data$signal_inst)
table(pca_data$signal_inst,pca_data$fullCarrier)
table(mean(pca_data$signal_inst),pca_data$fullCarrier)
table((pca_data$signal_inst),pca_data$fullCarrier)
colMeans(pca_data = subset(chunk,select=columns))
y = table((pca_data$signal_inst),pca_data$fullCarrier)
colMeans(y)
data.pca <- PCA(x )
ca_cols =  c('carrier','activity')
ca_data = subset(chunk,select=  ca_cols)
ca_data['activity'] = as.factor(ca_data['activity'])
ca_data$activity = as.factor(ca_data$activity)
fit <- factanal(ca_data, 3, rotation="varimax")
data.pca$var
2^3
2^4
2^501
3^2
2^3
2^500
2^550
500*16
500*16/3
source('~/Educational/HackUPC/altran.R', echo=TRUE)
install.packages("FactoMineR")
pca <- PCA(x)
pca
pca$var
pca <- PCA(pca_data)
pca <- PCA(pca_data)
pca
pca$var
source('~/run_at_home.R', echo=TRUE)
getwd()
damp_factor = c(0.30,0.50,.70, 0.80, 0.85, 0.90)
time_in_sec = c(729, 886, 1210,1350, 1490, 1550)
convergence = c(4,5, 7, 8, 9, 9)
par(mfrow=c(1,2))
plot(damp_factor,time_in_sec, cex = .8, type= "b", col = "dark red", ylab = "Time in milli seconds", xlab="Damping factor")
plot(damp_factor,convergence, cex = .8, type= "b" , col = "dark red", ylab = "Iterations", xlab="Damping factor")
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment4')
load('MB.rda')
X = Y
head()
head(X)
head(X[,'rs5999890'])
X_rem = X[,-'rs5999890']
X_rem = X[,'rs5999890']
X_rem = X[,!'rs5999890']
X_rem = subset(X, select = -'rs5999890')
X_rem = subset(X, select = -c('rs5999890'))
X_rem <- subset(X, select=-c(rs5999890))
Geno_rem = matrix(apply(X_rem, MARGIN = 2, function(x) return(c(substr(x,1,1),substr(x,2,2)))),nrow(X_rem), 2*ncol(X_rem))
HapEM_rem = haplo.em(Geno_rem,control=haplo.em.control(min.posterior=.001))
library(haplo.stats)
HapEM_rem = haplo.em(Geno_rem,control=haplo.em.control(min.posterior=.001))
print(HaploFreq$hap.prob)
print(HapEM_rem$hap.prob)
HapEM_rem
probs = HapEM$hap.prob
probs = HapEM$hap.prob
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment4')
load('MB.rda')
ls()
X = Y
paste("Number of Individuals ", dim(X)[1])
paste("Number of SNPs ", dim(X)[2])
paste("Percentage of missing data ", 100 * sum(is.na(Y))/length(Y))
2^ncol(X)
```
4. Estimate haplotype frequencies using the haplo.stats package (set the minimum posterior probability to 0.001). How many haplotypes do you find? List the haplotypes and their estimated probabilities. Which haplotype is the most common?
library(haplo.stats)
Geno = matrix(apply(X, MARGIN = 2, function(x) return(c(substr(x,1,1),substr(x,2,2)))),nrow(X), 2*ncol(X))
HapEM = haplo.em(Geno,control=haplo.em.control(min.posterior=.001))
paste("Number of Haplotypes ",length(HapEM$hap.prob))
print("Hapltypes and their probabilities ")
print(HapEM)
print("Common Haplotypes")
paste(unname(HapEM$haplotype[which.max(HapEM$hap.prob),]))
print("Maximum Probability ")
max(HapEM$hap.prob)
probs = HapEM$hap.prob
diplo_matrix <- matrix(0, nrow=length(probs), ncol=length(probs))
probs
colnames(diplo_matrix) = paste(rep("Hap",6),1:6)
rownames(diplo_matrix) = paste(rep("H",6),1:6)
colnames(diplo_matrix) = paste(rep("H",6),1:6)
for(i in 1:length(probs)){ # Rows
for(j in 1:length(probs)){ # Columns
if(i==j){
diplo_matrix[i,j] = probs[i]^2
}else{
diplo_matrix[i,j] = 2*probs[i]*probs[j]
}
}
}
diplo_matrix
diplo_max <- sort(diplo_matrix, decreasing = TRUE)[1:2]
diplo_max
max.diplo.mat <- sapply(diplo_max, function(x)
which(diplo_matrix == x, arr.ind = T)[1:2])
max_diplo_mat <- sapply(diplo_max, function(x)
which(diplo_matrix == x, arr.ind = T)[1:2])
max_diplo_mat
diplo_matrix
which(diplo_matrix == x, arr.ind = T)[1:2])
max_diplo_mat = sapply(diplo_max, function(x)
which(diplo_matrix == x, arr.ind = T)[1:2])
max_diplo_mat = data.frame(max_diplo_mat)
colnames(max.diplo.mat) <- c('Haplo1', 'Haplo2')
rownames(max.diplo.mat) <- c('Diplo1', 'Diplo2')
colnames(max.diplo.mat) <- c('H 1', 'H 2')
rownames(max.diplo.mat) <- c('D 1', 'D 2')
kable(max_diplo_mat, format="markdown", align = 'c')
library(HardyWeinberg)
library(genetics)
haplo <- function(data){
df = matrix(apply(data, MARGIN = 2,
function(x) return(c(substr(x,1,1),substr(x,2,2)))),
nrow = nrow(data), ncol = 2*ncol(data))
return(df)
genotypes <- apply(X,2,get_genotype)
}
get_genotype <- function(x) {
genotype <- table(x)
if(length(genotype)==2){
if(identical_letters(names(genotype)[1]) & identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], 0, genotype[2])
}else if(identical_letters(names(genotype)[1]) & !identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], genotype[2],0)
}else{
genotype <- c(0, genotype[1], genotype[2])
}
}else if(length(genotype)==3){
genotype <- genotype
}else{
genotype <- c(0, 0, genotype[1])
}
return(unname(genotype))
}
genotypes <- apply(X,2,get_genotype)
identical_letters <- function(x){
identical(unlist(strsplit(x,split=""))[1],unlist(strsplit(x,split=""))[2])
}
genotypes <- apply(X,2,get_genotype)
genotypes <- t(genotypes)
genotypes
MakeCounts(X)
ls()
X
MakeCounts(X,colnames(X))
MakeCounts(X,row.names(X))
MakeCounts(X,rownames(X))
MakeCounts(X)
ls()
X[1:5,1:5]
allels = colnames(X)
allels
MakeCounts(X,allels)
allels = colnames(X)
MakeCounts(X,allels)
?MakeCounts
X
MakeCounts(X[,1],allels[1])
MakeCounts(X[,1:4],allels[1:4])
MakeCounts(X,allels)
allels
X
MakeCounts(t(X),allels)
MakeCounts(X,allels)
snpg <- genotype(X,sep="")
MakeCounts(snpg,allels)
snpg
snpg <- genotype(t(X),sep="")
snpg
allels = colnames(X)
geno_count = MakeCounts(snpg,allels)
snpg <- genotype(X,sep="")
snpg
X
snpg <- genotype(X,sep=" ")
allels = colnames(X)
geno_count = MakeCounts(snpg,allels)
snpg <- genotype(X,sep="")
snpg = genotype(X,sep="")
allels = colnames(X)
geno_count = MakeCounts(snpg,allels)
allels
snpg
snpg = genotype(X,sep="")
snpg
snpg = genotype(X,sep="/")
snpg
X
snpg = genotype(X,sep="")
allels = colnames(X)
geno_count = MakeCounts(snpg,allels)
traceback()
allels
snpg
snpg
is.na(snpg)
!is.na(snpg)
snpg[!is.na(snpg)]
geno_count = MakeCounts(snpg[!is.na(snpg)],allels)
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment3')
# 1 Load
par(mfrow=c(1,1))
# Load data
load('ABO-CHB.rda')
ls()
# 2 Missing data
head(Z)
ind = ncol(Z)
snps = nrow(Z)
Z = t(Z)
missing = apply(Z,2,function(x)(is.na(x)))
per_missing = sum(missing)/length(missing)
per_missing * 100
# 3. ternary plot
snpg <- genotype(Z,sep="")
snpg
geno_count = MakeCounts(Z,alleles)
alleles
geno_count
alleles
Z
geno_count = MakeCounts(X,snpg[!is.na(snpg)])
snpg
Z
snpg
snpg = genotype(X,sep="")
snpg = genotype(X,sep="")
snpg
X
Z
snpg <- genotype(Z,sep="")
alleles
Z
alleles
snpg[!is.na(snpg)]
X
?geno_count
?MakeCounts
geno_count = MakeCounts(X,c("A/G","C/G","A/G","A/G","C/T"))
"A/G
""
"
geno_count = MakeCounts(X,c("A/G","C/G","A/G","A/G","C/T"))
geno_count = MakeCounts(X[,1],c("A/G","C/G","A/G","A/G","C/T"))
geno_count = MakeCounts(X[,1],c("AA"))
SNP1 <- c("GG","GG","GG","GG","GG","GG","GG","GG","GG")
geno_count = MakeCounts(SNP1,c("AA"))
geno_count = MakeCounts(SNP1,c("A/A"))
SNP2 <- c("CG","GG","CC","GG","GG","CG","CG","CG","CG")
X <- cbind(SNP1,SNP2)
geno_count = MakeCounts(X,c("A/A"))
geno_count = MakeCounts(X,c("A/A","AB"))
X
geno_count = MakeCounts(X,c("GG","CG"))
geno_count = MakeCounts(X,c("A/G","C/G"))
geno_count
geno_count = MakeCounts(X,c("AG","CG"))
/
geno_count = MakeCounts(X,c("A/G","C/G"))
geno_count = MakeCounts(X,c("G/G","C/G"))
geno_count = MakeCounts(X,c("K/G","C/G"))
geno_count = MakeCounts(X,c("K/A","C/G"))
geno_count = MakeCounts(X,c("K/M","C/G"))
G
geno_count = MakeCounts(X,c("K/G","C/G"))
load('MB.rda')
ls()
rm(list=ls())
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment4')
load('MB.rda')
ls()
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment4')
load('MB.rda')
ls()
get_genotype <- function(x) {
genotype <- table(x)
if(length(genotype)==2){
if(identical_letters(names(genotype)[1]) &
identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], 0, genotype[2])
}
else if(identical_letters(names(genotype)[1]) & !identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], genotype[2],0)
}
else{
genotype <- c(0, genotype[1], genotype[2])
}
}else if(length(genotype)==3){
genotype <- genotype
}
else{
genotype <- c(0, 0, genotype[1])
}
return(unname(genotype))
}
genotypes <- apply(X,2,get_genotype)
setwd('/Users/krishna/MIRI/BSG/R_BSG/Assignment4')
load('MB.rda')
ls()
X = Y
get_genotype
genotypes <- apply(X,2,get_genotype)
identical_letters <- function(x){
identical(unlist(strsplit(x,split=""))[1],
unlist(strsplit(x,split=""))[2])
}
genotypes <- apply(X,2,get_genotype)
genotypes <- t(genotypes)
n = unname(rowSums(genotypes))
n```
n
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]), rep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]),       xrep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
}
}
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]),       xrep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
}
get_genotype <- function(x) {
genotype <- table(x)
if(length(genotype)==2){
if(identical_letters(names(genotype)[1]) & identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], 0, genotype[2])
}else if(identical_letters(names(genotype)[1]) & !identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], genotype[2],0)
}else{
genotype <- c(0, genotype[1], genotype[2])
}
}else if(length(genotype)==3){
genotype <- genotype
}else{
genotype <- c(0, 0, genotype[1])
}
return(unname(genotype))
}
#Generate Genotypes
genotypes <- apply(Y,2,get_genotype)
genotypes <- apply(Y,2,get_genotype)
genotypes <- t(genotypes)
n = unname(rowSums(genotypes))
p = unname(apply(genotypes,1,maf))
simul <-c()
for(i in 1:length(n)){
s <- HWData(1,n=n[i],p=p[i])
simul <- rbind(simul,s)
}
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]), rep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
}
df_simulated <- as.data.frame(apply(format(simul),2,function(x) gsub("/", "", x)))
#Haplo Format
df_simulated_haplo = data.frame(prep_haplo(Y))
df_simulated <- as.data.frame(apply(format(simul),2,function(x) gsub("/", "", x)))
df_simulated_haplo = data.frame(prep_haplo(Y))
identical_letters <- function(x){
identical(unlist(strsplit(x,split=""))[1],unlist(strsplit(x,split=""))[2])
}
#Function to get the genotypes
get_genotype <- function(x) {
genotype <- table(x)
if(length(genotype)==2){
if(identical_letters(names(genotype)[1]) & identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], 0, genotype[2])
}else if(identical_letters(names(genotype)[1]) & !identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], genotype[2],0)
}else{
genotype <- c(0, genotype[1], genotype[2])
}
}else if(length(genotype)==3){
genotype <- genotype
}else{
genotype <- c(0, 0, genotype[1])
}
return(unname(genotype))
}
#Generate Genotypes
genotypes <- apply(Y,2,get_genotype)
genotypes <- t(genotypes)
#Sample Size
n = unname(rowSums(genotypes))
#Allele frequency
p = unname(apply(genotypes,1,maf))
#Simulated value for each genotype
simul <-c()
for(i in 1:length(n)){
s <- HWData(1,n=n[i],p=p[i])
simul <- rbind(simul,s)
}
#Change Genotype count to SNPS
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]), rep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
}
df_simulated <- as.data.frame(apply(format(simul),2,function(x) gsub("/", "", x)))
#Haplo Format
df_simulated_haplo = data.frame(prep_haplo(Y))
#Happlotype Frequency
HaploFreq_simulated <- haplo.em(df_simulated_haplo ,control=haplo.em.control(min.posterior=.001))
HaploFreq_simulated
identical_letters <- function(x){
identical(unlist(strsplit(x,split=""))[1],unlist(strsplit(x,split=""))[2])
}
prep_haplo <- function(data){
df = matrix(apply(data, MARGIN = 2,
function(x) return(c(substr(x,1,1),substr(x,2,2)))),
nrow = nrow(data), ncol = 2*ncol(data))
return(df)}
#Function to get the genotypes
get_genotype <- function(x) {
genotype <- table(x)
if(length(genotype)==2){
if(identical_letters(names(genotype)[1]) & identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], 0, genotype[2])
}else if(identical_letters(names(genotype)[1]) & !identical_letters(names(genotype)[2])){
genotype <- c(genotype[1], genotype[2],0)
}else{
genotype <- c(0, genotype[1], genotype[2])
}
}else if(length(genotype)==3){
genotype <- genotype
}else{
genotype <- c(0, 0, genotype[1])
}
return(unname(genotype))
}
#Generate Genotypes
genotypes <- apply(Y,2,get_genotype)
genotypes <- t(genotypes)
#Sample Size
n = unname(rowSums(genotypes))
#Allele frequency
p = unname(apply(genotypes,1,maf))
#Simulated value for each genotype
simul <-c()
for(i in 1:length(n)){
s <- HWData(1,n=n[i],p=p[i])
simul <- rbind(simul,s)
}
#Change Genotype count to SNPS
format <- function(data){
n = names(as.data.frame(data))
maxlen = max(apply(data,1,sum))
X = apply(data,1,function(x){ c(rep(n[1],x[1]), rep(n[2],x[2]),rep(n[3],x[3])) })
Y= lapply(X,function(x){ c(x,rep(NA,maxlen-length(x))) })
Z= data.frame(lapply(Y,function(x){genotype(x,sep="")}))
return(Z)
}
df_simulated <- as.data.frame(apply(format(simul),2,function(x) gsub("/", "", x)))
#Haplo Format
df_simulated_haplo = data.frame(prep_haplo(Y))
#Happlotype Frequency
HaploFreq_simulated <- haplo.em(df_simulated_haplo ,control=haplo.em.control(min.posterior=.001))
HaploFreq_simulated
